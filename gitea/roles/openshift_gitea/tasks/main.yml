---

- name: "install gitea catalog source"
  k8s:
    state: present
    definition: "{{ lookup('template', resource ) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/catalogsource.j2"
    catalogsource_name: "{{ gitea_operator_catalogsource_name }}"
    catalogsource_namespace: "openshift-marketplace"
    catalogsource_publisher: "Red Hat AgnosticD"
    catalog_snapshot_image: "{{ gitea_operator_catalog_snapshot_image }}"
    catalog_snapshot_image_tag: "{{ gitea_operator_catalog_snapshot_image_tag }}"

- name: "wait until gitea catalog source is ready"
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: catalogsource
    namespace: "openshift-marketplace"
    name: "{{ gitea_operator_catalogsource_name }}"
  register: r_gitea_catalogsource
  retries: 40
  delay: 15
  until:
    - r_gitea_catalogsource.resources is defined
    - r_gitea_catalogsource.resources | length > 0
    - r_gitea_catalogsource.resources[0].status.connectionState.lastObservedState is defined
    - r_gitea_catalogsource.resources[0].status.connectionState.lastObservedState == "READY"

- name: "create namespace for gitea operator"
  import_role:
    name: openshift_namespace
  vars:
    namespace: "{{ gitea_operator_namespace }}"
    namespace_description: ""
    namespace_display_name: ""

- name: "create operatorgroup in {{ gitea_operator_namespace }} namespace"
  import_role:
    name: operatorgroup
  vars:
    operatorgroup_namespace: "{{ gitea_operator_namespace }}"
    operatorgroup_name: "{{ gitea_operator_namespace }}"
    operatorgroup_target_namespace: ""

- name: "deploy gitea operator in {{ gitea_operator_namespace }} namespace"
  import_role:
    name: openshift_operator
  vars:
    operator_name: "{{ gitea_operator_package_name }}"
    packagemanifest: "{{ gitea_operator_packagemanifest }}"
    subscription_channel: "{{ gitea_operator_subscription_channel }}"
    subscription_namespace: "{{ gitea_operator_namespace }}" 
    subscription_name: "{{ gitea_operator_subscription_name }}"
    automatic_installplan_approval: "{{ gitea_operator_subscription_automatic_installplan_approval }}"
    subscription_starting_csv: "{{ gitea_operator_subscription_starting_csv }}"
    csv_prefix: "{{ gitea_operator_csv_prefix }}"

- name: "wait for gitea operator to be ready"
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ gitea_operator_namespace }}"
    name: "{{ gitea_operator_deployment_name }}"
  register: r_gitea_operator_deployment
  retries: 20
  delay: 10
  until:
    - r_gitea_operator_deployment.resources is defined
    - r_gitea_operator_deployment.resources | length | int > 0
    - r_gitea_operator_deployment.resources[0].status.availableReplicas is defined
    - r_gitea_operator_deployment.resources[0].status.availableReplicas | int == r_gitea_operator_deployment.resources[0].spec.replicas | int

- name: "create namespace for gitea instance"
  import_role:
    name: openshift_namespace
  vars:
    namespace: "{{ gitea_namespace }}"
    namespace_description: ""
    namespace_display_name: ""

- name: set Gitea route
  when: gitea_hostname | default("") | length > 0
  block:
    - name: determine wildcard domain
      k8s_info:
        api_version: operator.openshift.io/v1
        kind: IngressController
        name: default
        namespace: openshift-ingress-operator
      register: r_ingress_controller
    - name: set Gitea route URL
      set_fact:
        gitea_route: "{{ gitea_hostname }}.{{ r_ingress_controller.resources[0].status.domain }}"
    - name: debug route
      debug:
        msg: "Gitea Route: {{ gitea_route }}"    

- name: create CR for Gitea instance
  k8s:
    state: present
    namespace: "{{ gitea_namespace }}"
    definition: "{{ lookup('template', resource ) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/gitea.j2"

- name: wait for Gitea pod to be ready
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ gitea_namespace }}"
    name: "{{ gitea_name }}"
  register: r_gitea_deployment
  retries: 40
  delay: 10
  until:
    - r_gitea_deployment.resources | length | int > 0
    - r_gitea_deployment.resources[0].status.availableReplicas is defined
    - r_gitea_deployment.resources[0].status.availableReplicas | int == r_gitea_deployment.resources[0].spec.replicas | int

- name: retrieve Gitea pod
  k8s_info:
    kind: Pod
    namespace: "{{ gitea_namespace }}"
    label_selectors:
      - "app = {{ gitea_name }}"
  register: r_gitea_pod

- name: retrieve Gitea route
  k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: "{{ gitea_namespace }}"
    label_selectors:
      - "app = {{ gitea_name }}"
  register: r_gitea_route

- name: configure a Gitea admin user
  when: gitea_create_admin | bool
  block:
    - name: check if Gitea admin user already exists
      uri:
        url: "https://{{ r_gitea_route.resources[0].spec.host }}/api/v1/users/{{ gitea_admin_user }}"
        method: GET
        validate_certs: false
        status_code: 200, 404
      register: r_gitea_admin_user
      failed_when: r_gitea_admin_user.status != 200 and r_gitea_admin_user.status != 404
    
    - name: create admin user in Gitea
      command: >
        oc exec {{ r_gitea_pod.resources[0].metadata.name }}
        -n {{ gitea_namespace }}
        -- /home/gitea/gitea admin user create --username {{ gitea_admin_user }}
        --password {{ gitea_admin_password }}
        --email {{ gitea_admin_user }}@example.com
        --must-change-password=false --admin --config /home/gitea/conf/app.ini
      when: r_gitea_admin_user.status == 404

- name: create the users in Gitea
  when: gitea_create_users | bool
  include_tasks: create_user.yml
  loop: "{{ range(0, gitea_num_users | int + 1, 1) | list }}"

- name: print the Gitea route
  debug:
    msg: "You can access Gitea via the URL https://{{ r_gitea_route.resources[0].spec.host }}"

- name: print admin credentials when an admin was created
  when: gitea_create_admin | bool
  debug:
    msg: "The Gitea admin username is '{{ gitea_admin_user }}' and the password is '{{ gitea_admin_password }}'"

- name: print the user details if users are created
  when: gitea_create_users | bool
  debug:
    msg: >-
      Gitea users were created, from {{ gitea_generate_user_format | format(0) }} to
      {{ gitea_generate_user_format | format(gitea_num_users) }} with the password
      '{{ gitea_user_password }}'
